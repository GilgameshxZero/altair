#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <fstream>
#include <functional>
#include <limits>
#include <map>
#include <queue>
#include <utility>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

class BlockTheBlockPuzzle
{
	public:
		int flow[1000][1000];
		int par[1000], pathflow[1000];

		int minimumHoles (vector <string> board)
		{
			const int INF = 1e9;
			int n = board.size ();
			pair<int, int> last;
			vector< pair<int, int> > first;

			for (int a = 0;a < n;a++)
				for (int b = 0;b < n;b++)
					if (board[a][b] == '$')
						last = make_pair (a, b);
					else if (board[a][b] == 'b')
						first.push_back (make_pair (a, b));

			bool f1 = true;
			for (int a = 0;a < first.size ();a++)
				if ((first[a].first - last.first) % 3 == 0 && (first[a].second - last.second) % 3 == 0)
					f1 = false;

			//not aligned
			if (f1)
				return 0;

			int verts = 1, vend,
				in[50][50], out[50][50]; //numbers of each vertex if it exists.

			memset (flow, 0, sizeof (flow));

			//make each aligned block either 1 or 2 verts
			for (int a = last.first % 3;a < n;a += 3)
			{
				for (int b = last.second % 3;b < n;b += 3)
				{
					in[a][b] = verts++;
					out[a][b] = verts++;

					if (board[a][b] == '$')
					{
						vend = out[a][b];
						flow[in[a][b]][out[a][b]] = INF;
					}
					else if (board[a][b] == 'b')
						flow[0][in[a][b]] = flow[in[a][b]][out[a][b]] = INF;
					else if (board[a][b] == 'H')
						flow[in[a][b]][out[a][b]] = 0;
					else if (board[a][b] == '.')
						flow[in[a][b]][out[a][b]] = 1;
				}
			}

			//construct horozontal edges
			for (int a = last.first % 3;a < n;a += 3)
			{
				for (int b = last.second % 3;b < n - 3;b += 3)
				{
					int count;
					if (board[a][b + 1] == 'b' || board[a][b + 2] == 'b')
						count = INF;
					else
						count = (board[a][b + 1] == '.') + (board[a][b + 2] == '.');

					flow[out[a][b]][in[a][b + 3]] = flow[out[a][b + 3]][in[a][b]] = count;
				}
			}

			//construct vertical edges
			for (int a = last.first % 3;a < n - 3;a += 3)
			{
				for (int b = last.second % 3;b < n;b += 3)
				{
					int count;
					if (board[a + 1][b] == 'b' || board[a + 2][b] == 'b')
						count = INF;
					else
						count = (board[a + 1][b] == '.') + (board[a + 2][b] == '.');
					
					flow[out[a][b]][in[a + 3][b]] = flow[out[a + 3][b]][in[a][b]] = count;
				}
			}

			//maxflow, source is node 0
			int maxflow = 0;
			
			while (true)
			{
				//bfs findpath
				queue<int> q;

				q.push (0);
				for (int a = 0;a < verts;a++)
					par[a] = -1;
				par[0] = 0;
				memset (pathflow, 0, sizeof (pathflow));
				pathflow[0] = INF;

				while (!q.empty ())
				{
					int curr = q.front ();
					q.pop ();

					bool f2 = false;
					for (int a = 0;a < verts;a++)
					{
						if (flow[curr][a] > 0 && par[a] == -1)
						{
							par[a] = curr;
							pathflow[a] = min (flow[curr][a], pathflow[curr]);

							if (a != vend)
								q.push (a);
							else
							{
								f2 = true;
								break;
							}
						}
					}

					if (f2)
						break;
				}

				//adjust path flows/reverse flows and increment maxflow
				if (pathflow[vend] == 0)
					break;

				maxflow += pathflow[vend];

				int curr = vend;
				while (curr != 0)
				{
					flow[par[curr]][curr] -= pathflow[vend];
					flow[curr][par[curr]] += pathflow[vend];
					curr = par[curr];
				}
			}

			if (maxflow >= 1e5)
				return -1;

			return maxflow;
		}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	BlockTheBlockPuzzle *obj;
	int answer;
	obj = new BlockTheBlockPuzzle();
	clock_t startTime = clock();
	answer = obj->minimumHoles(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"b..$","....","HHHH","HHHH"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"............H..","...............","...............","HHH$HHH.....H..","HHHHHHH........","HHHHHHHH.......","......b..H.....","...............","...............","...H..H..H.....","...............","...............","...............","...............","..............."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"............H..","...............","...............","HHH$HHH........","HHHHHHH........","HHHHHHHH.......","......b..H.....","...............","...............","...H..H..H.....","...............","...............","...............","...............","..............."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"b..$...","...H...",".......","b..b..b","...H...",".......","b..b..b"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"b..b..b","..b..b.",".......","b..$bbb",".b.....","....b..","b..b..b"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	string t0[] = {"...........H....bb.....b...", "...........................", "........HH.b..b.....H......", ".............b.Hb..H.....H.", "....H........H.............", ".............HH..b.........", "b....H..........b.........b", "..HH.Hb....$.....H...b..H..", "..........H................", "..........H....HH..........", "...............H.........b.", "H...........bH....HbH..HbH.", "...H........H.............b", "........H.....b...H.H....H.", "................H....b...H.", "bb..........H....b..Hb.....", "..............b..H.........", "...H......b................", "b......H...HH..............", ".....H.....................", "..............H............", "..H.........b....b.........", "..........b................", "...b.bH..........H.........", "...HH..................H..H", "...........H......H........", "b........H............bb..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	cin.get ();
	return 0;
}