#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <fstream>
#include <functional>
#include <limits>
#include <map>
#include <queue>
#include <utility>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

class LongWordsDiv2
{
	public:
		string find(string word)
		{
			vector<int> pos[26];

			for (int a = 0;a < word.size () - 1;a++)
				if (word[a] == word[a + 1])
					return "Dislikes";
			for (int a = 0;a < word.size ();a++)
			{
				if (word[a] < 'A' || word[a] > 'Z')
					return "Dislikes";
				pos[word[a] - 'A'].push_back (a);

				if (pos[word[a] - 'A'].size () == 4)
					return "Dislikes";
			}

			for (int a = 0;a < 26;a++)
			{
				if (pos[a].size () == 2)
				{
					bool av[26];
					memset (av, 0, sizeof (av));
					for (int b = pos[a][0] + 1;b < pos[a][1];b++)
						av[word[b] - 'A'] = true;
					for (int b = pos[a][1] + 1;b < word.size ();b++)
					{
						if (av[word[b] - 'A'])
							return "Dislikes";
					}
				}
				if (pos[a].size () == 3)
				{
					bool av[26];
					memset (av, 0, sizeof (av));
					for (int b = pos[a][0] + 1;b < pos[a][1];b++)
						av[word[b] - 'A'] = true;
					for (int b = pos[a][1] + 1;b < word.size ();b++)
						if (av[word[b] - 'A'])
							return "Dislikes";
					memset (av, 0, sizeof (av));
					for (int b = pos[a][0] + 1;b < pos[a][2];b++)
						av[word[b] - 'A'] = true;
					for (int b = pos[a][2] + 1;b < word.size ();b++)
						if (av[word[b] - 'A'])
							return "Dislikes";
				}
			}

			return "Likes";
		}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	LongWordsDiv2 *obj;
	string answer;
	obj = new LongWordsDiv2();
	clock_t startTime = clock();
	answer = obj->find(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "AAA";
	p1 = "Dislikes";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "ABCBA";
	p1 = "Likes";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "ABCBAC";
	p1 = "Dislikes";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "TOPCODER";
	p1 = "Likes";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "VAMOSGIMNASIA";
	p1 = "Dislikes";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "SINGLEROUNDMATCH";
	p1 = "Likes";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = "DALELOBO";
	p1 = "Likes";
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	cin.get ();
	return 0;
}