#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <fstream>
#include <functional>
#include <limits>
#include <map>
#include <queue>
#include <utility>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

class ConundrumReloaded
{
	public:
		int minimumLiars (string answers)
		{
			//Decompose.
			vector<string> cycle;
			string temp;
			int x;
			for (x = answers.size () - 1;x >= 0;x--)
				if (answers[x] == '?')
					break;
				else
					temp += answers[x];
			reverse (temp.begin (), temp.end ());

			int y;
			for (y = 0;y < x;y++)
				if (answers[y] == '?')
					break;
				else
					temp += answers[y];

			cycle.push_back (temp);
			temp = "";
			for (y++;y <= x;y++)
				if (answers[y] == '?')
					cycle.push_back (temp),
					temp = "";
				else
					temp += answers[y];

			if (cycle.size () == 1 && cycle[0].size () == answers.size ())
			{
				int i = 0, j = 0, cur, b;
				for (b = 0, cur = 'H'; b < cycle[0].length ();b++)
				{
					i += (cur == 'L');
					if (cur == 'H')
						cur = cycle[0][b];
					else
					{
						if (cycle[0][b] == 'H') cur = 'L';
						else cur = 'H';
					}
				}
				if (cur == 'L')
					return -1;
				for (b = 0, cur = 'L'; b < cycle[0].length ();b++)
				{
					j += (cur == 'L');
					if (cur == 'H')
						cur = cycle[0][b];
					else
					{
						if (cycle[0][b] == 'H') cur = 'L';
						else cur = 'H';
					}
				}
				return min (i, j);
			}

			int ans = 0;
			for (int a = 0;a < cycle.size ();a++)
			{
				int i = 0, j = 0, cur, b;
				for (b = 0, cur = 'H'; b < cycle[a].length ();b++)
				{
					i += (cur == 'L');
					if (cur == 'H')
						cur = cycle[a][b];
					else
					{
						if (cycle[a][b] == 'H') cur = 'L';
						else cur = 'H';
					}
				}
				i += (cur == 'L');
				for (b = 0, cur = 'L'; b < cycle[a].length ();b++)
				{
					j += (cur == 'L');
					if (cur == 'H')
						cur = cycle[a][b];
					else
					{
						if (cycle[a][b] == 'H') cur = 'L';
						else cur = 'H';
					}
				}
				j += (cur == 'L');
				ans += min (i, j);
			}

			return ans;
		}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	ConundrumReloaded *obj;
	int answer;
	obj = new ConundrumReloaded();
	clock_t startTime = clock();
	answer = obj->minimumLiars(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "LLH";
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "?" "?" "?" "?" "?";
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "LHLH?";
	p1 = 2;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "?" "?LLLLLL?" "?";
	p1 = 3;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "LLL";
	p1 = -1;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "?L?L?L?L?L";
	p1 = 5;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = "?HL";
	p1 = 1;
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	p0 = "LHL";
	p1 = 1;
	all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	cin.get ();
	return 0;
}