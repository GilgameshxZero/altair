#include <bits/stdc++.h>
using namespace std;

string ccS{
	R""()""};
string cL{
	"5048207610820084004640860104110711200130313101361137014231450147115301562157"
	"0162116501830031305610730067003620440050002430283109011400660053000771940204"
	"0100111501220057003910350069101900003026409544330490013301480102006200522074"
	"0072208800891099111101171002513201441161115001934151015411590164217401751176"
	"0179318401911199020322050212124202690045001420040003203210331060107800870009"
	"4010307100750038001761770106009000490037002010060016200140961116013931190121"
	"1124012921460155116001710058309301010061211801340059201810401063210501250068"
	"0015502710510091103065560166013501130098212601411152113801430043714901581167"
	"0169218601901192116801724182018511880189219701981200020732080213121702212226"
	"0230123202375249025612590260226302751278029032921163017021730178118001813195"
	"0196120102022206020912100211521402151216022022220225122902353236023812390243"
	"2244024712480250425102551258026422670268127002773280028312850287228903061308"
	"0314003400112008205510791128431703211323032423310334133703660123104100471012"
	"0021200510130042507000830085309200941097010321081127337103921418042501400077"
	"10291054006440800081211001120065002210250023"};

int main(int, char const *[]) {
	bitset<500000> dA;
	vector<int> L{-1}, R{-1}, P{-1}, Y{-1};
	vector<string> E{""};
	int cur{0};
	for (int i{0}; i < cL.length(); i += 4) {
		for (int j{0}; j <= cL[i] - '0'; j++) {
			if (L[cur] == -1) {
				L[cur] = P.size();
				E.push_back(E[cur] + "0");
			} else if (R[cur] == -1) {
				R[cur] = P.size();
				E.push_back(E[cur] + "1");
			} else {
				cur = P[cur];
				j--;
				continue;
			}
			L.push_back(-1);
			R.push_back(-1);
			P.push_back(cur);
			Y.push_back(-1);
			cur = P.size() - 1;
		}
		int j{(cL[i + 1] - '0') * 100 + (cL[i + 2] - '0') * 10 + cL[i + 3] - '0'};
		Y[cur] = j;
		cur = P[cur];
	}

	bitset<160000> cSB;
	for (int i{0}; i < ccS.length(); i++) {
		for (int j{0}; j < 6; j++) {
			if (1 & (ccS[i] >> (5 - j))) {
				cSB.flip(6 * i + j);
			}
		}
	}

	int cDA{-1};
	cur = 0;
	for (int i{0}; i < ccS.length() * 6; i++) {
		if (!cSB[i]) {
			cur = L[cur];
		} else {
			cur = R[cur];
		}
		if (L[cur] == -1) {
			cDA += Y[cur] + 1;
			dA.flip(cDA);
			cur = 0;
		}
	}

	int N;
	cin >> N;
	cout << (N % 2 && !dA[N / 2] ? "alf" : "beata");
	return 0;
}
