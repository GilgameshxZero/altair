#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <fstream>
#include <functional>
#include <limits>
#include <map>
#include <queue>
#include <utility>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

class BubbleSortWithReversals
{
	public:
		int getMinSwaps(vector <int> A, int K)
		{
			int n = A.size (), inv[50][50], ninv[50][50], tinv[50][50];
			int dp[50][50][50];

			memset (inv, 0, sizeof (inv));
			memset (tinv, 0, sizeof (tinv));
			memset (dp, 0, sizeof (dp));

			for (int a = 0;a < n;a++)
			{
				for (int b = a;b < n;b++)
				{
					for (int c = a;c <= b;c++)
						for (int d = c + 1;d <= b;d++)
						{
							if (A[c] >= A[d])
								inv[a][b]++;
							if (A[c] > A[d])
								tinv[a][b]++;
						}
					ninv[a][b] = tinv[a][b] - ((b - a + 1) * (b - a) / 2 - inv[a][b]);
				}
			}

			for (int a = 0;a < n;a++)
				for (int b = a;b < n;b++)
					for (int c = a;c <= b;c++)
						for (int d = c;d <= b;d++)
							dp[1][a][b] = max (dp[1][a][b], ninv[c][d]);

			for (int a = 2;a <= K;a++)
			{
				for (int b = 0;b < n;b++)
				{
					for (int c = a;c < n;c++)
					{
						for (int d = b;d < c;d++)
						{
							for (int e = 0;e < a;e++)
							{
								if (dp[e][b][d] + dp[a - e][d + 1][c] > dp[a][b][c])
									dp[a][b][c] = dp[e][b][d] + dp[a - e][d + 1][c];
							}
						}
					}
				}
			}

			int ans = 1e9;
			for (int a = 0;a <= K;a++)
				ans = min (ans, tinv[0][n - 1] - dp[a][0][n - 1]);

			return ans;
		}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	BubbleSortWithReversals *obj;
	int answer;
	obj = new BubbleSortWithReversals();
	clock_t startTime = clock();
	answer = obj->getMinSwaps(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {6,8,8,7,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {7,2,2,13,5,5,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {12,5,1,10,12,6,6,10,6,8};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 12;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {2,3,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 1;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {482,619,619,601,660,660,691,691,77,77,96,77};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 9;
	p2 = 22;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {599, 375, 620, 893, 100, 375, 853, 330, 733, 599, 733, 776, 599};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 18;
	p2 = 25;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	cin.get ();
	return 0;
}