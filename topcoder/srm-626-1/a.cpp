#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <fstream>
#include <functional>
#include <limits>
#include <map>
#include <queue>
#include <utility>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

class FixedDiceGameDiv1
{
	public:
		vector<double> GetProb (int x, int y) //total dice to roll, faces on each dice.
		{
			double dp[51][2501]; //number of dice rolled, total sum of dice.

			memset (dp, 0, sizeof (dp));
			dp[0][0] = 1;

			for (int a = 0;a < x;a++) //dice rolled
			{
				for (int b = 0;b < 2501;b++)
				{
					for (int c = 1;c <= y && b + c < 2501;c++) //new roll
					{
						dp[a + 1][b + c] += dp[a][b] / y;
					}
				}
			}

			//copy to vec
			vector<double> r;
			r.resize (2501, 0);
			for (int a = 0;a < 2501;a++)
				r[a] = dp[x][a];

			return r;
		}

		double getExpectation (int a, int b, int c, int d)
		{
			vector<double> x = GetProb (a, b), y = GetProb (c, d);
			double r = 0, sum = 0;

			for (int i = 0;i <= a * b;i++)
			{
				for (int j = 0;j <= c * d && j < i;j++)
				{
					r += x[i] * y[j] * i;
					sum += x[i] * y[j];
				}
			}

			if (sum == 0)
				return -1;

			return r / sum;
		}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, double p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	FixedDiceGameDiv1 *obj;
	double answer;
	obj = new FixedDiceGameDiv1();
	clock_t startTime = clock();
	answer = obj->getExpectation(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p4 - answer) <= 1e-9 * max(1.0, fabs(p4));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	double p4;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 2;
	p2 = 1;
	p3 = 5;
	p4 = 2.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 1;
	p2 = 1;
	p3 = 3;
	p4 = 3.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 5;
	p2 = 1;
	p3 = 1;
	p4 = 3.4999999999999996;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2;
	p1 = 6;
	p2 = 50;
	p3 = 30;
	p4 = -1.0;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 50;
	p1 = 11;
	p2 = 50;
	p3 = 50;
	p4 = 369.8865999182022;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	cin.get ();
	return 0;
}
// END KAWIGIEDIT TESTING