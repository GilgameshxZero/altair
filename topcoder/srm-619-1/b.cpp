#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <fstream>
#include <functional>
#include <limits>
#include <map>
#include <queue>
#include <utility>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

class GoodCompanyDivOne
{
	public:
		int minimumCost(vector <int> superior, vector <int> training)
		{
			int n = superior.size (), j = training.size (), job[30];
			vector< pair<int, int> > dep[30]; //size, person

			for (int a = 0;a < n;a++)
				dep[a].push_back (make_pair (0, a));
			for (int a = 1;a < n;a++)
				dep[superior[a]].push_back (make_pair (0, a));
			for (int a = 0;a < n;a++)
			{
				for (int b = 0;b < dep[a].size ();b++)
					dep[a][b].first = dep[dep[a][b].second].size ();
				sort (dep[a].begin (), dep[a].end ());

				//test impossibility
				if (dep[a].size () > j)
					return -1;
			}

			//assign jobs index
			job[0] = dep[0].size ();
			queue<int> q;
			q.push (0);
			while (!q.empty ())
			{
				int curr = q.front ();
				q.pop ();

				bool av[30];
				memset (av, 1, sizeof (av));
				av[job[curr]] = 0;
				for (int a = 0, b = 1;a < dep[curr].size ();a++)
				{
					if (dep[curr][a].second == curr) continue;

					q.push (dep[curr][a].second);
					for (;;b++)
					{
						if (av[b])
						{
							job[dep[curr][a].second] = b;
							av[b++] = false;
							break;
						}
					}
				}
			}

			//get ans
			int ans = 0;
			sort (training.begin (), training.end ());
			for (int a = 0;a < n;a++)
			{
				if (job[a] == 1)
					ans += training[0] + training[1];
				else
					ans += training[0] + training[job[a] - 1];
			}

			return ans;
		}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	GoodCompanyDivOne *obj;
	int answer;
	obj = new GoodCompanyDivOne();
	clock_t startTime = clock();
	answer = obj->minimumCost(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {-1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {-1,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 10;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {-1,0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {-1,0,0,2,2,2,1,1,6,0,5,4,11,10,3,6,11,7,0,2,13,14,2,10,9,11,22,10,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {4,2,6,6,8,3,3,1,1,5,8,6,8,2,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 71;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	cin.get ();
	return 0;
}