#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <fstream>
#include <functional>
#include <limits>
#include <map>
#include <queue>
#include <utility>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

class HappyLetterDiv1
{
	public:
		string getHappyLetters(string letters)
		{
			string r;
			int cnt[26];
			
			memset (cnt, 0, sizeof (cnt));
			for (int a = 0;a < letters.size ();a++)
				cnt[letters[a] - 'a']++;

			for (int a = 0;a < 26;a++)
			{
				if (cnt[a] == 0) continue;

				vector<int> temp;
				for (int b = 0;b < 26;b++)
					if (b != a && cnt[b] != 0)
						temp.push_back (cnt[b]);
				if (temp.size () == 0)
				{
					r += a + 'a';
					continue;
				}
				sort (temp.begin (), temp.end ());

				while (temp.size () != 1)
				{
					while (temp[0] != 0)
					{
						temp[temp.size () - 1]--;
						if (temp.size () != 2 && temp[temp.size () - 1] < temp[temp.size () - 2])
							swap (temp[temp.size () - 1], temp[temp.size () - 2]);
						temp[0]--;
					}
					temp.erase (temp.begin ());
					sort (temp.begin (), temp.end ());
				}

				if (cnt[a] > temp[0])
					r += a + 'a';
			}

			return r;
		}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	HappyLetterDiv1 *obj;
	string answer;
	obj = new HappyLetterDiv1();
	clock_t startTime = clock();
	answer = obj->getHappyLetters(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "d";
	p1 = "d";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "aaaaaaaccdd";
	p1 = "a";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "ddabccadb";
	p1 = "abcd";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "aaabbb";
	p1 = "";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "rdokcogscosn";
	p1 = "cos";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	cin.get ();
	return 0;
}