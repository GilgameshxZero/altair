#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <fstream>
#include <functional>
#include <limits>
#include <map>
#include <queue>
#include <utility>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

class MergeStrings
{
	public:
		string getmin (string S, string A, string B)
		{
			int n = S.length (), x = A.length (), y = B.length ();
			string *dp, real_dp[52]; //empty string is valid, dp by level

			dp = real_dp + 1;
			for (int a = -1;a <= y;a++)
				dp[a] = "*";

			for (int a = 0;a <= x;a++)
			{
				for (int b = 0;b <= y;b++)
				{
					if (a == 0 && b == 0)
						dp[0] = "";
					else if (dp[b] != "*" && (S[n - a - b] == '?' || S[n - a - b] == A[x - a]))
					{
						dp[b] = A[x - a] + dp[b];
						if (dp[b - 1] != "*" && (S[n - a - b] == '?' || S[n - a - b] == B[y - b]))
							dp[b] = min (dp[b], B[y - b] + dp[b - 1]);
					}
					else
					{
						if (dp[b - 1] != "*" && (S[n - a - b] == '?' || S[n - a - b] == B[y - b]))
							dp[b] = B[y - b] + dp[b - 1];
						else
							dp[b] = "*";
					}
				}
			}

			if (dp[y] == "*")
				return "";
			
			return dp[y];
		}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, string p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"" << "," << "\"" << p2 << "\"";
	cout << "]" << endl;
	MergeStrings *obj;
	string answer;
	obj = new MergeStrings();
	clock_t startTime = clock();
	answer = obj->getmin(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = "?" "?CC?" "?";
	p1 = "ABC";
	p2 = "BCC";
	p3 = "ABCCBC";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "WHAT?";
	p1 = "THE";
	p2 = "WA";
	p3 = "";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "PARROT";
	p1 = "PARROT";
	p2 = "";
	p3 = "PARROT";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?";
	p1 = "AZZAA";
	p2 = "AZAZZA";
	p3 = "AAZAZZAAZZA";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "?" "?" "?" "?K?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?D?" "?" "?K?" "?" "?K?" "?" "?" "?" "?" "?" "?" "?K?" "?" "?" "?" "?K?" "?" "?" "?" "?" "?" "?";
	p1 = "KKKKKDKKKDKKDDKDDDKDKK";
	p2 = "KDKDDKKKDDKDDKKKDKDKKDDDDDDD";
	p3 = "KDKDKDKKKDDKDDKKKDKDKKDKDDDKDDDKKDKKKDKKDDKDDDKDKK";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	cin.get ();
	return 0;
}